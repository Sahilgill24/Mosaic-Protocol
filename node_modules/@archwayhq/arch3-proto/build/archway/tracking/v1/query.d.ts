import { BlockTracking, BlockTrackingAmino } from "./tracking";
import { BinaryReader, BinaryWriter } from "../../../binary";
/** QueryBlockGasTrackingRequest is the request for Query.BlockGasTracking. */
export interface QueryBlockGasTrackingRequest {
}
export interface QueryBlockGasTrackingRequestProtoMsg {
    typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingRequest";
    value: Uint8Array;
}
/** QueryBlockGasTrackingRequest is the request for Query.BlockGasTracking. */
export interface QueryBlockGasTrackingRequestAmino {
}
export interface QueryBlockGasTrackingRequestAminoMsg {
    type: "/archway.tracking.v1.QueryBlockGasTrackingRequest";
    value: QueryBlockGasTrackingRequestAmino;
}
/** QueryBlockGasTrackingResponse is the response for Query.BlockGasTracking. */
export interface QueryBlockGasTrackingResponse {
    block: BlockTracking;
}
export interface QueryBlockGasTrackingResponseProtoMsg {
    typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingResponse";
    value: Uint8Array;
}
/** QueryBlockGasTrackingResponse is the response for Query.BlockGasTracking. */
export interface QueryBlockGasTrackingResponseAmino {
    block?: BlockTrackingAmino;
}
export interface QueryBlockGasTrackingResponseAminoMsg {
    type: "/archway.tracking.v1.QueryBlockGasTrackingResponse";
    value: QueryBlockGasTrackingResponseAmino;
}
export declare const QueryBlockGasTrackingRequest: {
    typeUrl: string;
    encode(_: QueryBlockGasTrackingRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockGasTrackingRequest;
    fromJSON(_: any): QueryBlockGasTrackingRequest;
    toJSON(_: QueryBlockGasTrackingRequest): unknown;
    fromPartial(_: Partial<QueryBlockGasTrackingRequest>): QueryBlockGasTrackingRequest;
    fromAmino(_: QueryBlockGasTrackingRequestAmino): QueryBlockGasTrackingRequest;
    toAmino(_: QueryBlockGasTrackingRequest): QueryBlockGasTrackingRequestAmino;
    fromAminoMsg(object: QueryBlockGasTrackingRequestAminoMsg): QueryBlockGasTrackingRequest;
    fromProtoMsg(message: QueryBlockGasTrackingRequestProtoMsg): QueryBlockGasTrackingRequest;
    toProto(message: QueryBlockGasTrackingRequest): Uint8Array;
    toProtoMsg(message: QueryBlockGasTrackingRequest): QueryBlockGasTrackingRequestProtoMsg;
};
export declare const QueryBlockGasTrackingResponse: {
    typeUrl: string;
    encode(message: QueryBlockGasTrackingResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockGasTrackingResponse;
    fromJSON(object: any): QueryBlockGasTrackingResponse;
    toJSON(message: QueryBlockGasTrackingResponse): unknown;
    fromPartial(object: Partial<QueryBlockGasTrackingResponse>): QueryBlockGasTrackingResponse;
    fromAmino(object: QueryBlockGasTrackingResponseAmino): QueryBlockGasTrackingResponse;
    toAmino(message: QueryBlockGasTrackingResponse): QueryBlockGasTrackingResponseAmino;
    fromAminoMsg(object: QueryBlockGasTrackingResponseAminoMsg): QueryBlockGasTrackingResponse;
    fromProtoMsg(message: QueryBlockGasTrackingResponseProtoMsg): QueryBlockGasTrackingResponse;
    toProto(message: QueryBlockGasTrackingResponse): Uint8Array;
    toProtoMsg(message: QueryBlockGasTrackingResponse): QueryBlockGasTrackingResponseProtoMsg;
};
