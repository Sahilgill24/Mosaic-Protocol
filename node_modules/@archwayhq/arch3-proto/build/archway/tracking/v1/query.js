"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryBlockGasTrackingResponse = exports.QueryBlockGasTrackingRequest = void 0;
/* eslint-disable */
const tracking_1 = require("./tracking");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseQueryBlockGasTrackingRequest() {
    return {};
}
exports.QueryBlockGasTrackingRequest = {
    typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockGasTrackingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryBlockGasTrackingRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryBlockGasTrackingRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryBlockGasTrackingRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryBlockGasTrackingRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryBlockGasTrackingRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingRequest",
            value: exports.QueryBlockGasTrackingRequest.encode(message).finish()
        };
    }
};
function createBaseQueryBlockGasTrackingResponse() {
    return {
        block: tracking_1.BlockTracking.fromPartial({})
    };
}
exports.QueryBlockGasTrackingResponse = {
    typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.block !== undefined) {
            tracking_1.BlockTracking.encode(message.block, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockGasTrackingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = tracking_1.BlockTracking.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: (0, helpers_1.isSet)(object.block) ? tracking_1.BlockTracking.fromJSON(object.block) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.block !== undefined && (obj.block = message.block ? tracking_1.BlockTracking.toJSON(message.block) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBlockGasTrackingResponse();
        message.block = object.block !== undefined && object.block !== null ? tracking_1.BlockTracking.fromPartial(object.block) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryBlockGasTrackingResponse();
        if (object.block !== undefined && object.block !== null) {
            message.block = tracking_1.BlockTracking.fromAmino(object.block);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.block = message.block ? tracking_1.BlockTracking.toAmino(message.block) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryBlockGasTrackingResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryBlockGasTrackingResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryBlockGasTrackingResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.tracking.v1.QueryBlockGasTrackingResponse",
            value: exports.QueryBlockGasTrackingResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map