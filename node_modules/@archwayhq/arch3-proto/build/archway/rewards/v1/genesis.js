"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = void 0;
/* eslint-disable */
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseGenesisState() {
    return {
        params: rewards_1.Params.fromPartial({}),
        contractsMetadata: [],
        blockRewards: [],
        txRewards: [],
        minConsensusFee: coin_1.DecCoin.fromPartial({}),
        rewardsRecordLastId: BigInt(0),
        rewardsRecords: [],
        flatFees: []
    };
}
exports.GenesisState = {
    typeUrl: "/archway.rewards.v1.GenesisState",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.params !== undefined) {
            rewards_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.contractsMetadata) {
            rewards_1.ContractMetadata.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.blockRewards) {
            rewards_1.BlockRewards.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.txRewards) {
            rewards_1.TxRewards.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.minConsensusFee !== undefined) {
            coin_1.DecCoin.encode(message.minConsensusFee, writer.uint32(42).fork()).ldelim();
        }
        if (message.rewardsRecordLastId !== BigInt(0)) {
            writer.uint32(48).uint64(message.rewardsRecordLastId);
        }
        for (const v of message.rewardsRecords) {
            rewards_1.RewardsRecord.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.flatFees) {
            rewards_1.FlatFee.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = rewards_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.contractsMetadata.push(rewards_1.ContractMetadata.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.blockRewards.push(rewards_1.BlockRewards.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.txRewards.push(rewards_1.TxRewards.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.minConsensusFee = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.rewardsRecordLastId = reader.uint64();
                    break;
                case 7:
                    message.rewardsRecords.push(rewards_1.RewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.flatFees.push(rewards_1.FlatFee.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? rewards_1.Params.fromJSON(object.params) : undefined,
            contractsMetadata: Array.isArray(object === null || object === void 0 ? void 0 : object.contractsMetadata) ? object.contractsMetadata.map((e) => rewards_1.ContractMetadata.fromJSON(e)) : [],
            blockRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.blockRewards) ? object.blockRewards.map((e) => rewards_1.BlockRewards.fromJSON(e)) : [],
            txRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.txRewards) ? object.txRewards.map((e) => rewards_1.TxRewards.fromJSON(e)) : [],
            minConsensusFee: (0, helpers_1.isSet)(object.minConsensusFee) ? coin_1.DecCoin.fromJSON(object.minConsensusFee) : undefined,
            rewardsRecordLastId: (0, helpers_1.isSet)(object.rewardsRecordLastId) ? BigInt(object.rewardsRecordLastId.toString()) : BigInt(0),
            rewardsRecords: Array.isArray(object === null || object === void 0 ? void 0 : object.rewardsRecords) ? object.rewardsRecords.map((e) => rewards_1.RewardsRecord.fromJSON(e)) : [],
            flatFees: Array.isArray(object === null || object === void 0 ? void 0 : object.flatFees) ? object.flatFees.map((e) => rewards_1.FlatFee.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? rewards_1.Params.toJSON(message.params) : undefined);
        if (message.contractsMetadata) {
            obj.contractsMetadata = message.contractsMetadata.map(e => e ? rewards_1.ContractMetadata.toJSON(e) : undefined);
        }
        else {
            obj.contractsMetadata = [];
        }
        if (message.blockRewards) {
            obj.blockRewards = message.blockRewards.map(e => e ? rewards_1.BlockRewards.toJSON(e) : undefined);
        }
        else {
            obj.blockRewards = [];
        }
        if (message.txRewards) {
            obj.txRewards = message.txRewards.map(e => e ? rewards_1.TxRewards.toJSON(e) : undefined);
        }
        else {
            obj.txRewards = [];
        }
        message.minConsensusFee !== undefined && (obj.minConsensusFee = message.minConsensusFee ? coin_1.DecCoin.toJSON(message.minConsensusFee) : undefined);
        message.rewardsRecordLastId !== undefined && (obj.rewardsRecordLastId = (message.rewardsRecordLastId || BigInt(0)).toString());
        if (message.rewardsRecords) {
            obj.rewardsRecords = message.rewardsRecords.map(e => e ? rewards_1.RewardsRecord.toJSON(e) : undefined);
        }
        else {
            obj.rewardsRecords = [];
        }
        if (message.flatFees) {
            obj.flatFees = message.flatFees.map(e => e ? rewards_1.FlatFee.toJSON(e) : undefined);
        }
        else {
            obj.flatFees = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGenesisState();
        message.params = object.params !== undefined && object.params !== null ? rewards_1.Params.fromPartial(object.params) : undefined;
        message.contractsMetadata = ((_a = object.contractsMetadata) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.ContractMetadata.fromPartial(e))) || [];
        message.blockRewards = ((_b = object.blockRewards) === null || _b === void 0 ? void 0 : _b.map(e => rewards_1.BlockRewards.fromPartial(e))) || [];
        message.txRewards = ((_c = object.txRewards) === null || _c === void 0 ? void 0 : _c.map(e => rewards_1.TxRewards.fromPartial(e))) || [];
        message.minConsensusFee = object.minConsensusFee !== undefined && object.minConsensusFee !== null ? coin_1.DecCoin.fromPartial(object.minConsensusFee) : undefined;
        message.rewardsRecordLastId = object.rewardsRecordLastId !== undefined && object.rewardsRecordLastId !== null ? BigInt(object.rewardsRecordLastId.toString()) : BigInt(0);
        message.rewardsRecords = ((_d = object.rewardsRecords) === null || _d === void 0 ? void 0 : _d.map(e => rewards_1.RewardsRecord.fromPartial(e))) || [];
        message.flatFees = ((_e = object.flatFees) === null || _e === void 0 ? void 0 : _e.map(e => rewards_1.FlatFee.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGenesisState();
        if (object.params !== undefined && object.params !== null) {
            message.params = rewards_1.Params.fromAmino(object.params);
        }
        message.contractsMetadata = ((_a = object.contracts_metadata) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.ContractMetadata.fromAmino(e))) || [];
        message.blockRewards = ((_b = object.block_rewards) === null || _b === void 0 ? void 0 : _b.map(e => rewards_1.BlockRewards.fromAmino(e))) || [];
        message.txRewards = ((_c = object.tx_rewards) === null || _c === void 0 ? void 0 : _c.map(e => rewards_1.TxRewards.fromAmino(e))) || [];
        if (object.min_consensus_fee !== undefined && object.min_consensus_fee !== null) {
            message.minConsensusFee = coin_1.DecCoin.fromAmino(object.min_consensus_fee);
        }
        if (object.rewards_record_last_id !== undefined && object.rewards_record_last_id !== null) {
            message.rewardsRecordLastId = BigInt(object.rewards_record_last_id);
        }
        message.rewardsRecords = ((_d = object.rewards_records) === null || _d === void 0 ? void 0 : _d.map(e => rewards_1.RewardsRecord.fromAmino(e))) || [];
        message.flatFees = ((_e = object.flat_fees) === null || _e === void 0 ? void 0 : _e.map(e => rewards_1.FlatFee.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? rewards_1.Params.toAmino(message.params) : undefined;
        if (message.contractsMetadata) {
            obj.contracts_metadata = message.contractsMetadata.map(e => e ? rewards_1.ContractMetadata.toAmino(e) : undefined);
        }
        else {
            obj.contracts_metadata = [];
        }
        if (message.blockRewards) {
            obj.block_rewards = message.blockRewards.map(e => e ? rewards_1.BlockRewards.toAmino(e) : undefined);
        }
        else {
            obj.block_rewards = [];
        }
        if (message.txRewards) {
            obj.tx_rewards = message.txRewards.map(e => e ? rewards_1.TxRewards.toAmino(e) : undefined);
        }
        else {
            obj.tx_rewards = [];
        }
        obj.min_consensus_fee = message.minConsensusFee ? coin_1.DecCoin.toAmino(message.minConsensusFee) : undefined;
        obj.rewards_record_last_id = message.rewardsRecordLastId ? message.rewardsRecordLastId.toString() : undefined;
        if (message.rewardsRecords) {
            obj.rewards_records = message.rewardsRecords.map(e => e ? rewards_1.RewardsRecord.toAmino(e) : undefined);
        }
        else {
            obj.rewards_records = [];
        }
        if (message.flatFees) {
            obj.flat_fees = message.flatFees.map(e => e ? rewards_1.FlatFee.toAmino(e) : undefined);
        }
        else {
            obj.flat_fees = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GenesisState.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.GenesisState.decode(message.value);
    },
    toProto(message) {
        return exports.GenesisState.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.GenesisState",
            value: exports.GenesisState.encode(message).finish()
        };
    }
};
//# sourceMappingURL=genesis.js.map