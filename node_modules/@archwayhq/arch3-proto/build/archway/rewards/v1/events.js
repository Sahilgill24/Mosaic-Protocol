"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractFlatFeeSetEvent = exports.MinConsensusFeeSetEvent = exports.RewardsWithdrawEvent = exports.ContractRewardCalculationEvent = exports.ContractMetadataSetEvent = void 0;
/* eslint-disable */
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseContractMetadataSetEvent() {
    return {
        contractAddress: "",
        metadata: rewards_1.ContractMetadata.fromPartial({})
    };
}
exports.ContractMetadataSetEvent = {
    typeUrl: "/archway.rewards.v1.ContractMetadataSetEvent",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractMetadataSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContractMetadataSetEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseContractMetadataSetEvent();
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        if (object.metadata !== undefined && object.metadata !== null) {
            message.metadata = rewards_1.ContractMetadata.fromAmino(object.metadata);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.contract_address = message.contractAddress;
        obj.metadata = message.metadata ? rewards_1.ContractMetadata.toAmino(message.metadata) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ContractMetadataSetEvent.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ContractMetadataSetEvent.decode(message.value);
    },
    toProto(message) {
        return exports.ContractMetadataSetEvent.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.ContractMetadataSetEvent",
            value: exports.ContractMetadataSetEvent.encode(message).finish()
        };
    }
};
function createBaseContractRewardCalculationEvent() {
    return {
        contractAddress: "",
        gasConsumed: BigInt(0),
        inflationRewards: coin_1.Coin.fromPartial({}),
        feeRebateRewards: [],
        metadata: undefined
    };
}
exports.ContractRewardCalculationEvent = {
    typeUrl: "/archway.rewards.v1.ContractRewardCalculationEvent",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.gasConsumed !== BigInt(0)) {
            writer.uint32(16).uint64(message.gasConsumed);
        }
        if (message.inflationRewards !== undefined) {
            coin_1.Coin.encode(message.inflationRewards, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.feeRebateRewards) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractRewardCalculationEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.gasConsumed = reader.uint64();
                    break;
                case 3:
                    message.inflationRewards = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.feeRebateRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            gasConsumed: (0, helpers_1.isSet)(object.gasConsumed) ? BigInt(object.gasConsumed.toString()) : BigInt(0),
            inflationRewards: (0, helpers_1.isSet)(object.inflationRewards) ? coin_1.Coin.fromJSON(object.inflationRewards) : undefined,
            feeRebateRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.feeRebateRewards) ? object.feeRebateRewards.map((e) => coin_1.Coin.fromJSON(e)) : [],
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.gasConsumed !== undefined && (obj.gasConsumed = (message.gasConsumed || BigInt(0)).toString());
        message.inflationRewards !== undefined && (obj.inflationRewards = message.inflationRewards ? coin_1.Coin.toJSON(message.inflationRewards) : undefined);
        if (message.feeRebateRewards) {
            obj.feeRebateRewards = message.feeRebateRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.feeRebateRewards = [];
        }
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContractRewardCalculationEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.gasConsumed = object.gasConsumed !== undefined && object.gasConsumed !== null ? BigInt(object.gasConsumed.toString()) : BigInt(0);
        message.inflationRewards = object.inflationRewards !== undefined && object.inflationRewards !== null ? coin_1.Coin.fromPartial(object.inflationRewards) : undefined;
        message.feeRebateRewards = ((_b = object.feeRebateRewards) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseContractRewardCalculationEvent();
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        if (object.gas_consumed !== undefined && object.gas_consumed !== null) {
            message.gasConsumed = BigInt(object.gas_consumed);
        }
        if (object.inflation_rewards !== undefined && object.inflation_rewards !== null) {
            message.inflationRewards = coin_1.Coin.fromAmino(object.inflation_rewards);
        }
        message.feeRebateRewards = ((_a = object.fee_rebate_rewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        if (object.metadata !== undefined && object.metadata !== null) {
            message.metadata = rewards_1.ContractMetadata.fromAmino(object.metadata);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.contract_address = message.contractAddress;
        obj.gas_consumed = message.gasConsumed ? message.gasConsumed.toString() : undefined;
        obj.inflation_rewards = message.inflationRewards ? coin_1.Coin.toAmino(message.inflationRewards) : undefined;
        if (message.feeRebateRewards) {
            obj.fee_rebate_rewards = message.feeRebateRewards.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.fee_rebate_rewards = [];
        }
        obj.metadata = message.metadata ? rewards_1.ContractMetadata.toAmino(message.metadata) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ContractRewardCalculationEvent.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ContractRewardCalculationEvent.decode(message.value);
    },
    toProto(message) {
        return exports.ContractRewardCalculationEvent.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.ContractRewardCalculationEvent",
            value: exports.ContractRewardCalculationEvent.encode(message).finish()
        };
    }
};
function createBaseRewardsWithdrawEvent() {
    return {
        rewardAddress: "",
        rewards: []
    };
}
exports.RewardsWithdrawEvent = {
    typeUrl: "/archway.rewards.v1.RewardsWithdrawEvent",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.rewardAddress !== "") {
            writer.uint32(10).string(message.rewardAddress);
        }
        for (const v of message.rewards) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardsWithdrawEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardAddress = reader.string();
                    break;
                case 2:
                    message.rewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardAddress: (0, helpers_1.isSet)(object.rewardAddress) ? String(object.rewardAddress) : "",
            rewards: Array.isArray(object === null || object === void 0 ? void 0 : object.rewards) ? object.rewards.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardAddress !== undefined && (obj.rewardAddress = message.rewardAddress);
        if (message.rewards) {
            obj.rewards = message.rewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.rewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRewardsWithdrawEvent();
        message.rewardAddress = (_a = object.rewardAddress) !== null && _a !== void 0 ? _a : "";
        message.rewards = ((_b = object.rewards) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseRewardsWithdrawEvent();
        if (object.reward_address !== undefined && object.reward_address !== null) {
            message.rewardAddress = object.reward_address;
        }
        message.rewards = ((_a = object.rewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.reward_address = message.rewardAddress;
        if (message.rewards) {
            obj.rewards = message.rewards.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.rewards = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.RewardsWithdrawEvent.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.RewardsWithdrawEvent.decode(message.value);
    },
    toProto(message) {
        return exports.RewardsWithdrawEvent.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.RewardsWithdrawEvent",
            value: exports.RewardsWithdrawEvent.encode(message).finish()
        };
    }
};
function createBaseMinConsensusFeeSetEvent() {
    return {
        fee: coin_1.DecCoin.fromPartial({})
    };
}
exports.MinConsensusFeeSetEvent = {
    typeUrl: "/archway.rewards.v1.MinConsensusFeeSetEvent",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.fee !== undefined) {
            coin_1.DecCoin.encode(message.fee, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMinConsensusFeeSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fee = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            fee: (0, helpers_1.isSet)(object.fee) ? coin_1.DecCoin.fromJSON(object.fee) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.fee !== undefined && (obj.fee = message.fee ? coin_1.DecCoin.toJSON(message.fee) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMinConsensusFeeSetEvent();
        message.fee = object.fee !== undefined && object.fee !== null ? coin_1.DecCoin.fromPartial(object.fee) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMinConsensusFeeSetEvent();
        if (object.fee !== undefined && object.fee !== null) {
            message.fee = coin_1.DecCoin.fromAmino(object.fee);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.fee = message.fee ? coin_1.DecCoin.toAmino(message.fee) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MinConsensusFeeSetEvent.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MinConsensusFeeSetEvent.decode(message.value);
    },
    toProto(message) {
        return exports.MinConsensusFeeSetEvent.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MinConsensusFeeSetEvent",
            value: exports.MinConsensusFeeSetEvent.encode(message).finish()
        };
    }
};
function createBaseContractFlatFeeSetEvent() {
    return {
        contractAddress: "",
        flatFee: coin_1.Coin.fromPartial({})
    };
}
exports.ContractFlatFeeSetEvent = {
    typeUrl: "/archway.rewards.v1.ContractFlatFeeSetEvent",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        if (message.flatFee !== undefined) {
            coin_1.Coin.encode(message.flatFee, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractFlatFeeSetEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                case 2:
                    message.flatFee = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            flatFee: (0, helpers_1.isSet)(object.flatFee) ? coin_1.Coin.fromJSON(object.flatFee) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.flatFee !== undefined && (obj.flatFee = message.flatFee ? coin_1.Coin.toJSON(message.flatFee) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseContractFlatFeeSetEvent();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        message.flatFee = object.flatFee !== undefined && object.flatFee !== null ? coin_1.Coin.fromPartial(object.flatFee) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseContractFlatFeeSetEvent();
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        if (object.flat_fee !== undefined && object.flat_fee !== null) {
            message.flatFee = coin_1.Coin.fromAmino(object.flat_fee);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.contract_address = message.contractAddress;
        obj.flat_fee = message.flatFee ? coin_1.Coin.toAmino(message.flatFee) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ContractFlatFeeSetEvent.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.ContractFlatFeeSetEvent.decode(message.value);
    },
    toProto(message) {
        return exports.ContractFlatFeeSetEvent.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.ContractFlatFeeSetEvent",
            value: exports.ContractFlatFeeSetEvent.encode(message).finish()
        };
    }
};
//# sourceMappingURL=events.js.map