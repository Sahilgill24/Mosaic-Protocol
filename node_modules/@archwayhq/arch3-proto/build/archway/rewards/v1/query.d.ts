import { PageRequest, PageRequestAmino, PageResponse, PageResponseAmino } from "../../../cosmos/base/query/v1beta1/pagination";
import { Params, ParamsAmino, ContractMetadata, ContractMetadataAmino, BlockRewards, BlockRewardsAmino, TxRewards, TxRewardsAmino, RewardsRecord, RewardsRecordAmino } from "./rewards";
import { Coin, CoinAmino, DecCoin, DecCoinAmino } from "../../../cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../binary";
/** QueryParamsRequest is the request for Query.Params. */
export interface QueryParamsRequest {
}
export interface QueryParamsRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryParamsRequest";
    value: Uint8Array;
}
/** QueryParamsRequest is the request for Query.Params. */
export interface QueryParamsRequestAmino {
}
export interface QueryParamsRequestAminoMsg {
    type: "/archway.rewards.v1.QueryParamsRequest";
    value: QueryParamsRequestAmino;
}
/** QueryParamsResponse is the response for Query.Params. */
export interface QueryParamsResponse {
    params: Params;
}
export interface QueryParamsResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryParamsResponse";
    value: Uint8Array;
}
/** QueryParamsResponse is the response for Query.Params. */
export interface QueryParamsResponseAmino {
    params?: ParamsAmino;
}
export interface QueryParamsResponseAminoMsg {
    type: "/archway.rewards.v1.QueryParamsResponse";
    value: QueryParamsResponseAmino;
}
/** QueryContractMetadataRequest is the request for Query.ContractMetadata. */
export interface QueryContractMetadataRequest {
    /** contract_address is the contract address (bech32 encoded). */
    contractAddress: string;
}
export interface QueryContractMetadataRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryContractMetadataRequest";
    value: Uint8Array;
}
/** QueryContractMetadataRequest is the request for Query.ContractMetadata. */
export interface QueryContractMetadataRequestAmino {
    /** contract_address is the contract address (bech32 encoded). */
    contract_address?: string;
}
export interface QueryContractMetadataRequestAminoMsg {
    type: "/archway.rewards.v1.QueryContractMetadataRequest";
    value: QueryContractMetadataRequestAmino;
}
/** QueryContractMetadataResponse is the response for Query.ContractMetadata. */
export interface QueryContractMetadataResponse {
    metadata: ContractMetadata;
}
export interface QueryContractMetadataResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryContractMetadataResponse";
    value: Uint8Array;
}
/** QueryContractMetadataResponse is the response for Query.ContractMetadata. */
export interface QueryContractMetadataResponseAmino {
    metadata?: ContractMetadataAmino;
}
export interface QueryContractMetadataResponseAminoMsg {
    type: "/archway.rewards.v1.QueryContractMetadataResponse";
    value: QueryContractMetadataResponseAmino;
}
/**
 * QueryBlockRewardsTrackingRequest is the request for
 * Query.BlockRewardsTracking.
 */
export interface QueryBlockRewardsTrackingRequest {
}
export interface QueryBlockRewardsTrackingRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingRequest";
    value: Uint8Array;
}
/**
 * QueryBlockRewardsTrackingRequest is the request for
 * Query.BlockRewardsTracking.
 */
export interface QueryBlockRewardsTrackingRequestAmino {
}
export interface QueryBlockRewardsTrackingRequestAminoMsg {
    type: "/archway.rewards.v1.QueryBlockRewardsTrackingRequest";
    value: QueryBlockRewardsTrackingRequestAmino;
}
/**
 * QueryBlockRewardsTrackingResponse is the response for
 * Query.BlockRewardsTracking.
 */
export interface QueryBlockRewardsTrackingResponse {
    block: BlockTracking;
}
export interface QueryBlockRewardsTrackingResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingResponse";
    value: Uint8Array;
}
/**
 * QueryBlockRewardsTrackingResponse is the response for
 * Query.BlockRewardsTracking.
 */
export interface QueryBlockRewardsTrackingResponseAmino {
    block?: BlockTrackingAmino;
}
export interface QueryBlockRewardsTrackingResponseAminoMsg {
    type: "/archway.rewards.v1.QueryBlockRewardsTrackingResponse";
    value: QueryBlockRewardsTrackingResponseAmino;
}
/** QueryRewardsPoolRequest is the request for Query.RewardsPool. */
export interface QueryRewardsPoolRequest {
}
export interface QueryRewardsPoolRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryRewardsPoolRequest";
    value: Uint8Array;
}
/** QueryRewardsPoolRequest is the request for Query.RewardsPool. */
export interface QueryRewardsPoolRequestAmino {
}
export interface QueryRewardsPoolRequestAminoMsg {
    type: "/archway.rewards.v1.QueryRewardsPoolRequest";
    value: QueryRewardsPoolRequestAmino;
}
/** QueryRewardsPoolResponse is the response for Query.RewardsPool. */
export interface QueryRewardsPoolResponse {
    /** undistributed_funds are undistributed yet tokens (ready for withdrawal). */
    undistributedFunds: Coin[];
    /**
     * treasury_funds are treasury tokens available (no mechanism is available to
     * withdraw ATM). Treasury tokens are collected on a block basis. Those tokens
     * are unused block rewards.
     */
    treasuryFunds: Coin[];
}
export interface QueryRewardsPoolResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryRewardsPoolResponse";
    value: Uint8Array;
}
/** QueryRewardsPoolResponse is the response for Query.RewardsPool. */
export interface QueryRewardsPoolResponseAmino {
    /** undistributed_funds are undistributed yet tokens (ready for withdrawal). */
    undistributed_funds?: CoinAmino[];
    /**
     * treasury_funds are treasury tokens available (no mechanism is available to
     * withdraw ATM). Treasury tokens are collected on a block basis. Those tokens
     * are unused block rewards.
     */
    treasury_funds?: CoinAmino[];
}
export interface QueryRewardsPoolResponseAminoMsg {
    type: "/archway.rewards.v1.QueryRewardsPoolResponse";
    value: QueryRewardsPoolResponseAmino;
}
/** QueryEstimateTxFeesRequest is the request for Query.EstimateTxFees. */
export interface QueryEstimateTxFeesRequest {
    /** gas_limit is the transaction gas limit. */
    gasLimit: bigint;
    /** contract_address whose flat fee is considered when estimating tx fees. */
    contractAddress: string;
}
export interface QueryEstimateTxFeesRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesRequest";
    value: Uint8Array;
}
/** QueryEstimateTxFeesRequest is the request for Query.EstimateTxFees. */
export interface QueryEstimateTxFeesRequestAmino {
    /** gas_limit is the transaction gas limit. */
    gas_limit?: string;
    /** contract_address whose flat fee is considered when estimating tx fees. */
    contract_address?: string;
}
export interface QueryEstimateTxFeesRequestAminoMsg {
    type: "/archway.rewards.v1.QueryEstimateTxFeesRequest";
    value: QueryEstimateTxFeesRequestAmino;
}
/** QueryEstimateTxFeesResponse is the response for Query.EstimateTxFees. */
export interface QueryEstimateTxFeesResponse {
    /** gas_unit_price defines the minimum transaction fee per gas unit. */
    gasUnitPrice: DecCoin;
    /** estimated_fee is the estimated transaction fee for a given gas limit. */
    estimatedFee: Coin[];
}
export interface QueryEstimateTxFeesResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesResponse";
    value: Uint8Array;
}
/** QueryEstimateTxFeesResponse is the response for Query.EstimateTxFees. */
export interface QueryEstimateTxFeesResponseAmino {
    /** gas_unit_price defines the minimum transaction fee per gas unit. */
    gas_unit_price?: DecCoinAmino;
    /** estimated_fee is the estimated transaction fee for a given gas limit. */
    estimated_fee?: CoinAmino[];
}
export interface QueryEstimateTxFeesResponseAminoMsg {
    type: "/archway.rewards.v1.QueryEstimateTxFeesResponse";
    value: QueryEstimateTxFeesResponseAmino;
}
/** BlockTracking is the tracking information for a block. */
export interface BlockTracking {
    /** inflation_rewards defines the inflation rewards for the block. */
    inflationRewards: BlockRewards;
    /** tx_rewards defines the transaction rewards for the block. */
    txRewards: TxRewards[];
}
export interface BlockTrackingProtoMsg {
    typeUrl: "/archway.rewards.v1.BlockTracking";
    value: Uint8Array;
}
/** BlockTracking is the tracking information for a block. */
export interface BlockTrackingAmino {
    /** inflation_rewards defines the inflation rewards for the block. */
    inflation_rewards?: BlockRewardsAmino;
    /** tx_rewards defines the transaction rewards for the block. */
    tx_rewards?: TxRewardsAmino[];
}
export interface BlockTrackingAminoMsg {
    type: "/archway.rewards.v1.BlockTracking";
    value: BlockTrackingAmino;
}
/** QueryRewardsRecordsRequest is the request for Query.RewardsRecords. */
export interface QueryRewardsRecordsRequest {
    /**
     * rewards_address is the target address to query records for (bech32
     * encoded).
     */
    rewardsAddress: string;
    /** pagination is an optional pagination options for the request. */
    pagination?: PageRequest;
}
export interface QueryRewardsRecordsRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryRewardsRecordsRequest";
    value: Uint8Array;
}
/** QueryRewardsRecordsRequest is the request for Query.RewardsRecords. */
export interface QueryRewardsRecordsRequestAmino {
    /**
     * rewards_address is the target address to query records for (bech32
     * encoded).
     */
    rewards_address?: string;
    /** pagination is an optional pagination options for the request. */
    pagination?: PageRequestAmino;
}
export interface QueryRewardsRecordsRequestAminoMsg {
    type: "/archway.rewards.v1.QueryRewardsRecordsRequest";
    value: QueryRewardsRecordsRequestAmino;
}
/** QueryRewardsRecordsResponse is the response for Query.RewardsRecords. */
export interface QueryRewardsRecordsResponse {
    /** records is the list of rewards records. */
    records: RewardsRecord[];
    /** pagination is the pagination details in the response. */
    pagination?: PageResponse;
}
export interface QueryRewardsRecordsResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryRewardsRecordsResponse";
    value: Uint8Array;
}
/** QueryRewardsRecordsResponse is the response for Query.RewardsRecords. */
export interface QueryRewardsRecordsResponseAmino {
    /** records is the list of rewards records. */
    records?: RewardsRecordAmino[];
    /** pagination is the pagination details in the response. */
    pagination?: PageResponseAmino;
}
export interface QueryRewardsRecordsResponseAminoMsg {
    type: "/archway.rewards.v1.QueryRewardsRecordsResponse";
    value: QueryRewardsRecordsResponseAmino;
}
/** QueryOutstandingRewardsRequest is the request for Query.OutstandingRewards. */
export interface QueryOutstandingRewardsRequest {
    /**
     * rewards_address is the target address to query calculated rewards for
     * (bech32 encoded).
     */
    rewardsAddress: string;
}
export interface QueryOutstandingRewardsRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsRequest";
    value: Uint8Array;
}
/** QueryOutstandingRewardsRequest is the request for Query.OutstandingRewards. */
export interface QueryOutstandingRewardsRequestAmino {
    /**
     * rewards_address is the target address to query calculated rewards for
     * (bech32 encoded).
     */
    rewards_address?: string;
}
export interface QueryOutstandingRewardsRequestAminoMsg {
    type: "/archway.rewards.v1.QueryOutstandingRewardsRequest";
    value: QueryOutstandingRewardsRequestAmino;
}
/** QueryOutstandingRewardsResponse is the response for Query.OutstandingRewards. */
export interface QueryOutstandingRewardsResponse {
    /** total_rewards is the total rewards credited to the rewards_address. */
    totalRewards: Coin[];
    /**
     * records_num is the total number of RewardsRecord objects stored for the
     * rewards_address.
     */
    recordsNum: bigint;
}
export interface QueryOutstandingRewardsResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsResponse";
    value: Uint8Array;
}
/** QueryOutstandingRewardsResponse is the response for Query.OutstandingRewards. */
export interface QueryOutstandingRewardsResponseAmino {
    /** total_rewards is the total rewards credited to the rewards_address. */
    total_rewards?: CoinAmino[];
    /**
     * records_num is the total number of RewardsRecord objects stored for the
     * rewards_address.
     */
    records_num?: string;
}
export interface QueryOutstandingRewardsResponseAminoMsg {
    type: "/archway.rewards.v1.QueryOutstandingRewardsResponse";
    value: QueryOutstandingRewardsResponseAmino;
}
/** QueryFlatFeeRequest is the request for Query.FlatFeet */
export interface QueryFlatFeeRequest {
    /** contract_address is the contract address (bech32 encoded). */
    contractAddress: string;
}
export interface QueryFlatFeeRequestProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryFlatFeeRequest";
    value: Uint8Array;
}
/** QueryFlatFeeRequest is the request for Query.FlatFeet */
export interface QueryFlatFeeRequestAmino {
    /** contract_address is the contract address (bech32 encoded). */
    contract_address?: string;
}
export interface QueryFlatFeeRequestAminoMsg {
    type: "/archway.rewards.v1.QueryFlatFeeRequest";
    value: QueryFlatFeeRequestAmino;
}
/** QueryFlatFeeResponse is the response for Query.FlatFee */
export interface QueryFlatFeeResponse {
    /**
     * flat_fee_amount defines the minimum flat fee set by the contract_owner per
     * contract execution.
     */
    flatFeeAmount: Coin;
}
export interface QueryFlatFeeResponseProtoMsg {
    typeUrl: "/archway.rewards.v1.QueryFlatFeeResponse";
    value: Uint8Array;
}
/** QueryFlatFeeResponse is the response for Query.FlatFee */
export interface QueryFlatFeeResponseAmino {
    /**
     * flat_fee_amount defines the minimum flat fee set by the contract_owner per
     * contract execution.
     */
    flat_fee_amount?: CoinAmino;
}
export interface QueryFlatFeeResponseAminoMsg {
    type: "/archway.rewards.v1.QueryFlatFeeResponse";
    value: QueryFlatFeeResponseAmino;
}
export declare const QueryParamsRequest: {
    typeUrl: string;
    encode(_: QueryParamsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial(_: Partial<QueryParamsRequest>): QueryParamsRequest;
    fromAmino(_: QueryParamsRequestAmino): QueryParamsRequest;
    toAmino(_: QueryParamsRequest): QueryParamsRequestAmino;
    fromAminoMsg(object: QueryParamsRequestAminoMsg): QueryParamsRequest;
    fromProtoMsg(message: QueryParamsRequestProtoMsg): QueryParamsRequest;
    toProto(message: QueryParamsRequest): Uint8Array;
    toProtoMsg(message: QueryParamsRequest): QueryParamsRequestProtoMsg;
};
export declare const QueryParamsResponse: {
    typeUrl: string;
    encode(message: QueryParamsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial(object: Partial<QueryParamsResponse>): QueryParamsResponse;
    fromAmino(object: QueryParamsResponseAmino): QueryParamsResponse;
    toAmino(message: QueryParamsResponse): QueryParamsResponseAmino;
    fromAminoMsg(object: QueryParamsResponseAminoMsg): QueryParamsResponse;
    fromProtoMsg(message: QueryParamsResponseProtoMsg): QueryParamsResponse;
    toProto(message: QueryParamsResponse): Uint8Array;
    toProtoMsg(message: QueryParamsResponse): QueryParamsResponseProtoMsg;
};
export declare const QueryContractMetadataRequest: {
    typeUrl: string;
    encode(message: QueryContractMetadataRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryContractMetadataRequest;
    fromJSON(object: any): QueryContractMetadataRequest;
    toJSON(message: QueryContractMetadataRequest): unknown;
    fromPartial(object: Partial<QueryContractMetadataRequest>): QueryContractMetadataRequest;
    fromAmino(object: QueryContractMetadataRequestAmino): QueryContractMetadataRequest;
    toAmino(message: QueryContractMetadataRequest): QueryContractMetadataRequestAmino;
    fromAminoMsg(object: QueryContractMetadataRequestAminoMsg): QueryContractMetadataRequest;
    fromProtoMsg(message: QueryContractMetadataRequestProtoMsg): QueryContractMetadataRequest;
    toProto(message: QueryContractMetadataRequest): Uint8Array;
    toProtoMsg(message: QueryContractMetadataRequest): QueryContractMetadataRequestProtoMsg;
};
export declare const QueryContractMetadataResponse: {
    typeUrl: string;
    encode(message: QueryContractMetadataResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryContractMetadataResponse;
    fromJSON(object: any): QueryContractMetadataResponse;
    toJSON(message: QueryContractMetadataResponse): unknown;
    fromPartial(object: Partial<QueryContractMetadataResponse>): QueryContractMetadataResponse;
    fromAmino(object: QueryContractMetadataResponseAmino): QueryContractMetadataResponse;
    toAmino(message: QueryContractMetadataResponse): QueryContractMetadataResponseAmino;
    fromAminoMsg(object: QueryContractMetadataResponseAminoMsg): QueryContractMetadataResponse;
    fromProtoMsg(message: QueryContractMetadataResponseProtoMsg): QueryContractMetadataResponse;
    toProto(message: QueryContractMetadataResponse): Uint8Array;
    toProtoMsg(message: QueryContractMetadataResponse): QueryContractMetadataResponseProtoMsg;
};
export declare const QueryBlockRewardsTrackingRequest: {
    typeUrl: string;
    encode(_: QueryBlockRewardsTrackingRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockRewardsTrackingRequest;
    fromJSON(_: any): QueryBlockRewardsTrackingRequest;
    toJSON(_: QueryBlockRewardsTrackingRequest): unknown;
    fromPartial(_: Partial<QueryBlockRewardsTrackingRequest>): QueryBlockRewardsTrackingRequest;
    fromAmino(_: QueryBlockRewardsTrackingRequestAmino): QueryBlockRewardsTrackingRequest;
    toAmino(_: QueryBlockRewardsTrackingRequest): QueryBlockRewardsTrackingRequestAmino;
    fromAminoMsg(object: QueryBlockRewardsTrackingRequestAminoMsg): QueryBlockRewardsTrackingRequest;
    fromProtoMsg(message: QueryBlockRewardsTrackingRequestProtoMsg): QueryBlockRewardsTrackingRequest;
    toProto(message: QueryBlockRewardsTrackingRequest): Uint8Array;
    toProtoMsg(message: QueryBlockRewardsTrackingRequest): QueryBlockRewardsTrackingRequestProtoMsg;
};
export declare const QueryBlockRewardsTrackingResponse: {
    typeUrl: string;
    encode(message: QueryBlockRewardsTrackingResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockRewardsTrackingResponse;
    fromJSON(object: any): QueryBlockRewardsTrackingResponse;
    toJSON(message: QueryBlockRewardsTrackingResponse): unknown;
    fromPartial(object: Partial<QueryBlockRewardsTrackingResponse>): QueryBlockRewardsTrackingResponse;
    fromAmino(object: QueryBlockRewardsTrackingResponseAmino): QueryBlockRewardsTrackingResponse;
    toAmino(message: QueryBlockRewardsTrackingResponse): QueryBlockRewardsTrackingResponseAmino;
    fromAminoMsg(object: QueryBlockRewardsTrackingResponseAminoMsg): QueryBlockRewardsTrackingResponse;
    fromProtoMsg(message: QueryBlockRewardsTrackingResponseProtoMsg): QueryBlockRewardsTrackingResponse;
    toProto(message: QueryBlockRewardsTrackingResponse): Uint8Array;
    toProtoMsg(message: QueryBlockRewardsTrackingResponse): QueryBlockRewardsTrackingResponseProtoMsg;
};
export declare const QueryRewardsPoolRequest: {
    typeUrl: string;
    encode(_: QueryRewardsPoolRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPoolRequest;
    fromJSON(_: any): QueryRewardsPoolRequest;
    toJSON(_: QueryRewardsPoolRequest): unknown;
    fromPartial(_: Partial<QueryRewardsPoolRequest>): QueryRewardsPoolRequest;
    fromAmino(_: QueryRewardsPoolRequestAmino): QueryRewardsPoolRequest;
    toAmino(_: QueryRewardsPoolRequest): QueryRewardsPoolRequestAmino;
    fromAminoMsg(object: QueryRewardsPoolRequestAminoMsg): QueryRewardsPoolRequest;
    fromProtoMsg(message: QueryRewardsPoolRequestProtoMsg): QueryRewardsPoolRequest;
    toProto(message: QueryRewardsPoolRequest): Uint8Array;
    toProtoMsg(message: QueryRewardsPoolRequest): QueryRewardsPoolRequestProtoMsg;
};
export declare const QueryRewardsPoolResponse: {
    typeUrl: string;
    encode(message: QueryRewardsPoolResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPoolResponse;
    fromJSON(object: any): QueryRewardsPoolResponse;
    toJSON(message: QueryRewardsPoolResponse): unknown;
    fromPartial(object: Partial<QueryRewardsPoolResponse>): QueryRewardsPoolResponse;
    fromAmino(object: QueryRewardsPoolResponseAmino): QueryRewardsPoolResponse;
    toAmino(message: QueryRewardsPoolResponse): QueryRewardsPoolResponseAmino;
    fromAminoMsg(object: QueryRewardsPoolResponseAminoMsg): QueryRewardsPoolResponse;
    fromProtoMsg(message: QueryRewardsPoolResponseProtoMsg): QueryRewardsPoolResponse;
    toProto(message: QueryRewardsPoolResponse): Uint8Array;
    toProtoMsg(message: QueryRewardsPoolResponse): QueryRewardsPoolResponseProtoMsg;
};
export declare const QueryEstimateTxFeesRequest: {
    typeUrl: string;
    encode(message: QueryEstimateTxFeesRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateTxFeesRequest;
    fromJSON(object: any): QueryEstimateTxFeesRequest;
    toJSON(message: QueryEstimateTxFeesRequest): unknown;
    fromPartial(object: Partial<QueryEstimateTxFeesRequest>): QueryEstimateTxFeesRequest;
    fromAmino(object: QueryEstimateTxFeesRequestAmino): QueryEstimateTxFeesRequest;
    toAmino(message: QueryEstimateTxFeesRequest): QueryEstimateTxFeesRequestAmino;
    fromAminoMsg(object: QueryEstimateTxFeesRequestAminoMsg): QueryEstimateTxFeesRequest;
    fromProtoMsg(message: QueryEstimateTxFeesRequestProtoMsg): QueryEstimateTxFeesRequest;
    toProto(message: QueryEstimateTxFeesRequest): Uint8Array;
    toProtoMsg(message: QueryEstimateTxFeesRequest): QueryEstimateTxFeesRequestProtoMsg;
};
export declare const QueryEstimateTxFeesResponse: {
    typeUrl: string;
    encode(message: QueryEstimateTxFeesResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateTxFeesResponse;
    fromJSON(object: any): QueryEstimateTxFeesResponse;
    toJSON(message: QueryEstimateTxFeesResponse): unknown;
    fromPartial(object: Partial<QueryEstimateTxFeesResponse>): QueryEstimateTxFeesResponse;
    fromAmino(object: QueryEstimateTxFeesResponseAmino): QueryEstimateTxFeesResponse;
    toAmino(message: QueryEstimateTxFeesResponse): QueryEstimateTxFeesResponseAmino;
    fromAminoMsg(object: QueryEstimateTxFeesResponseAminoMsg): QueryEstimateTxFeesResponse;
    fromProtoMsg(message: QueryEstimateTxFeesResponseProtoMsg): QueryEstimateTxFeesResponse;
    toProto(message: QueryEstimateTxFeesResponse): Uint8Array;
    toProtoMsg(message: QueryEstimateTxFeesResponse): QueryEstimateTxFeesResponseProtoMsg;
};
export declare const BlockTracking: {
    typeUrl: string;
    encode(message: BlockTracking, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): BlockTracking;
    fromJSON(object: any): BlockTracking;
    toJSON(message: BlockTracking): unknown;
    fromPartial(object: Partial<BlockTracking>): BlockTracking;
    fromAmino(object: BlockTrackingAmino): BlockTracking;
    toAmino(message: BlockTracking): BlockTrackingAmino;
    fromAminoMsg(object: BlockTrackingAminoMsg): BlockTracking;
    fromProtoMsg(message: BlockTrackingProtoMsg): BlockTracking;
    toProto(message: BlockTracking): Uint8Array;
    toProtoMsg(message: BlockTracking): BlockTrackingProtoMsg;
};
export declare const QueryRewardsRecordsRequest: {
    typeUrl: string;
    encode(message: QueryRewardsRecordsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsRecordsRequest;
    fromJSON(object: any): QueryRewardsRecordsRequest;
    toJSON(message: QueryRewardsRecordsRequest): unknown;
    fromPartial(object: Partial<QueryRewardsRecordsRequest>): QueryRewardsRecordsRequest;
    fromAmino(object: QueryRewardsRecordsRequestAmino): QueryRewardsRecordsRequest;
    toAmino(message: QueryRewardsRecordsRequest): QueryRewardsRecordsRequestAmino;
    fromAminoMsg(object: QueryRewardsRecordsRequestAminoMsg): QueryRewardsRecordsRequest;
    fromProtoMsg(message: QueryRewardsRecordsRequestProtoMsg): QueryRewardsRecordsRequest;
    toProto(message: QueryRewardsRecordsRequest): Uint8Array;
    toProtoMsg(message: QueryRewardsRecordsRequest): QueryRewardsRecordsRequestProtoMsg;
};
export declare const QueryRewardsRecordsResponse: {
    typeUrl: string;
    encode(message: QueryRewardsRecordsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsRecordsResponse;
    fromJSON(object: any): QueryRewardsRecordsResponse;
    toJSON(message: QueryRewardsRecordsResponse): unknown;
    fromPartial(object: Partial<QueryRewardsRecordsResponse>): QueryRewardsRecordsResponse;
    fromAmino(object: QueryRewardsRecordsResponseAmino): QueryRewardsRecordsResponse;
    toAmino(message: QueryRewardsRecordsResponse): QueryRewardsRecordsResponseAmino;
    fromAminoMsg(object: QueryRewardsRecordsResponseAminoMsg): QueryRewardsRecordsResponse;
    fromProtoMsg(message: QueryRewardsRecordsResponseProtoMsg): QueryRewardsRecordsResponse;
    toProto(message: QueryRewardsRecordsResponse): Uint8Array;
    toProtoMsg(message: QueryRewardsRecordsResponse): QueryRewardsRecordsResponseProtoMsg;
};
export declare const QueryOutstandingRewardsRequest: {
    typeUrl: string;
    encode(message: QueryOutstandingRewardsRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryOutstandingRewardsRequest;
    fromJSON(object: any): QueryOutstandingRewardsRequest;
    toJSON(message: QueryOutstandingRewardsRequest): unknown;
    fromPartial(object: Partial<QueryOutstandingRewardsRequest>): QueryOutstandingRewardsRequest;
    fromAmino(object: QueryOutstandingRewardsRequestAmino): QueryOutstandingRewardsRequest;
    toAmino(message: QueryOutstandingRewardsRequest): QueryOutstandingRewardsRequestAmino;
    fromAminoMsg(object: QueryOutstandingRewardsRequestAminoMsg): QueryOutstandingRewardsRequest;
    fromProtoMsg(message: QueryOutstandingRewardsRequestProtoMsg): QueryOutstandingRewardsRequest;
    toProto(message: QueryOutstandingRewardsRequest): Uint8Array;
    toProtoMsg(message: QueryOutstandingRewardsRequest): QueryOutstandingRewardsRequestProtoMsg;
};
export declare const QueryOutstandingRewardsResponse: {
    typeUrl: string;
    encode(message: QueryOutstandingRewardsResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryOutstandingRewardsResponse;
    fromJSON(object: any): QueryOutstandingRewardsResponse;
    toJSON(message: QueryOutstandingRewardsResponse): unknown;
    fromPartial(object: Partial<QueryOutstandingRewardsResponse>): QueryOutstandingRewardsResponse;
    fromAmino(object: QueryOutstandingRewardsResponseAmino): QueryOutstandingRewardsResponse;
    toAmino(message: QueryOutstandingRewardsResponse): QueryOutstandingRewardsResponseAmino;
    fromAminoMsg(object: QueryOutstandingRewardsResponseAminoMsg): QueryOutstandingRewardsResponse;
    fromProtoMsg(message: QueryOutstandingRewardsResponseProtoMsg): QueryOutstandingRewardsResponse;
    toProto(message: QueryOutstandingRewardsResponse): Uint8Array;
    toProtoMsg(message: QueryOutstandingRewardsResponse): QueryOutstandingRewardsResponseProtoMsg;
};
export declare const QueryFlatFeeRequest: {
    typeUrl: string;
    encode(message: QueryFlatFeeRequest, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryFlatFeeRequest;
    fromJSON(object: any): QueryFlatFeeRequest;
    toJSON(message: QueryFlatFeeRequest): unknown;
    fromPartial(object: Partial<QueryFlatFeeRequest>): QueryFlatFeeRequest;
    fromAmino(object: QueryFlatFeeRequestAmino): QueryFlatFeeRequest;
    toAmino(message: QueryFlatFeeRequest): QueryFlatFeeRequestAmino;
    fromAminoMsg(object: QueryFlatFeeRequestAminoMsg): QueryFlatFeeRequest;
    fromProtoMsg(message: QueryFlatFeeRequestProtoMsg): QueryFlatFeeRequest;
    toProto(message: QueryFlatFeeRequest): Uint8Array;
    toProtoMsg(message: QueryFlatFeeRequest): QueryFlatFeeRequestProtoMsg;
};
export declare const QueryFlatFeeResponse: {
    typeUrl: string;
    encode(message: QueryFlatFeeResponse, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): QueryFlatFeeResponse;
    fromJSON(object: any): QueryFlatFeeResponse;
    toJSON(message: QueryFlatFeeResponse): unknown;
    fromPartial(object: Partial<QueryFlatFeeResponse>): QueryFlatFeeResponse;
    fromAmino(object: QueryFlatFeeResponseAmino): QueryFlatFeeResponse;
    toAmino(message: QueryFlatFeeResponse): QueryFlatFeeResponseAmino;
    fromAminoMsg(object: QueryFlatFeeResponseAminoMsg): QueryFlatFeeResponse;
    fromProtoMsg(message: QueryFlatFeeResponseProtoMsg): QueryFlatFeeResponse;
    toProto(message: QueryFlatFeeResponse): Uint8Array;
    toProtoMsg(message: QueryFlatFeeResponse): QueryFlatFeeResponseProtoMsg;
};
