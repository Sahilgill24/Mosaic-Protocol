"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryFlatFeeResponse = exports.QueryFlatFeeRequest = exports.QueryOutstandingRewardsResponse = exports.QueryOutstandingRewardsRequest = exports.QueryRewardsRecordsResponse = exports.QueryRewardsRecordsRequest = exports.BlockTracking = exports.QueryEstimateTxFeesResponse = exports.QueryEstimateTxFeesRequest = exports.QueryRewardsPoolResponse = exports.QueryRewardsPoolRequest = exports.QueryBlockRewardsTrackingResponse = exports.QueryBlockRewardsTrackingRequest = exports.QueryContractMetadataResponse = exports.QueryContractMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = void 0;
/* eslint-disable */
const pagination_1 = require("../../../cosmos/base/query/v1beta1/pagination");
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/archway.rewards.v1.QueryParamsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: rewards_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/archway.rewards.v1.QueryParamsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.params !== undefined) {
            rewards_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = rewards_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: (0, helpers_1.isSet)(object.params) ? rewards_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? rewards_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? rewards_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryParamsResponse();
        if (object.params !== undefined && object.params !== null) {
            message.params = rewards_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? rewards_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryContractMetadataRequest() {
    return {
        contractAddress: ""
    };
}
exports.QueryContractMetadataRequest = {
    typeUrl: "/archway.rewards.v1.QueryContractMetadataRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryContractMetadataRequest();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryContractMetadataRequest();
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.contract_address = message.contractAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryContractMetadataRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryContractMetadataRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryContractMetadataRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryContractMetadataRequest",
            value: exports.QueryContractMetadataRequest.encode(message).finish()
        };
    }
};
function createBaseQueryContractMetadataResponse() {
    return {
        metadata: rewards_1.ContractMetadata.fromPartial({})
    };
}
exports.QueryContractMetadataResponse = {
    typeUrl: "/archway.rewards.v1.QueryContractMetadataResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryContractMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryContractMetadataResponse();
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryContractMetadataResponse();
        if (object.metadata !== undefined && object.metadata !== null) {
            message.metadata = rewards_1.ContractMetadata.fromAmino(object.metadata);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.metadata = message.metadata ? rewards_1.ContractMetadata.toAmino(message.metadata) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryContractMetadataResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryContractMetadataResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryContractMetadataResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryContractMetadataResponse",
            value: exports.QueryContractMetadataResponse.encode(message).finish()
        };
    }
};
function createBaseQueryBlockRewardsTrackingRequest() {
    return {};
}
exports.QueryBlockRewardsTrackingRequest = {
    typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockRewardsTrackingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryBlockRewardsTrackingRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryBlockRewardsTrackingRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryBlockRewardsTrackingRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryBlockRewardsTrackingRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryBlockRewardsTrackingRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingRequest",
            value: exports.QueryBlockRewardsTrackingRequest.encode(message).finish()
        };
    }
};
function createBaseQueryBlockRewardsTrackingResponse() {
    return {
        block: exports.BlockTracking.fromPartial({})
    };
}
exports.QueryBlockRewardsTrackingResponse = {
    typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.block !== undefined) {
            exports.BlockTracking.encode(message.block, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBlockRewardsTrackingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = exports.BlockTracking.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            block: (0, helpers_1.isSet)(object.block) ? exports.BlockTracking.fromJSON(object.block) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.block !== undefined && (obj.block = message.block ? exports.BlockTracking.toJSON(message.block) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryBlockRewardsTrackingResponse();
        message.block = object.block !== undefined && object.block !== null ? exports.BlockTracking.fromPartial(object.block) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryBlockRewardsTrackingResponse();
        if (object.block !== undefined && object.block !== null) {
            message.block = exports.BlockTracking.fromAmino(object.block);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.block = message.block ? exports.BlockTracking.toAmino(message.block) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryBlockRewardsTrackingResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryBlockRewardsTrackingResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryBlockRewardsTrackingResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryBlockRewardsTrackingResponse",
            value: exports.QueryBlockRewardsTrackingResponse.encode(message).finish()
        };
    }
};
function createBaseQueryRewardsPoolRequest() {
    return {};
}
exports.QueryRewardsPoolRequest = {
    typeUrl: "/archway.rewards.v1.QueryRewardsPoolRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsPoolRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryRewardsPoolRequest();
        return message;
    },
    fromAmino(_) {
        const message = createBaseQueryRewardsPoolRequest();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryRewardsPoolRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryRewardsPoolRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryRewardsPoolRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryRewardsPoolRequest",
            value: exports.QueryRewardsPoolRequest.encode(message).finish()
        };
    }
};
function createBaseQueryRewardsPoolResponse() {
    return {
        undistributedFunds: [],
        treasuryFunds: []
    };
}
exports.QueryRewardsPoolResponse = {
    typeUrl: "/archway.rewards.v1.QueryRewardsPoolResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.undistributedFunds) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.treasuryFunds) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.undistributedFunds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.treasuryFunds.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            undistributedFunds: Array.isArray(object === null || object === void 0 ? void 0 : object.undistributedFunds) ? object.undistributedFunds.map((e) => coin_1.Coin.fromJSON(e)) : [],
            treasuryFunds: Array.isArray(object === null || object === void 0 ? void 0 : object.treasuryFunds) ? object.treasuryFunds.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.undistributedFunds) {
            obj.undistributedFunds = message.undistributedFunds.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.undistributedFunds = [];
        }
        if (message.treasuryFunds) {
            obj.treasuryFunds = message.treasuryFunds.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.treasuryFunds = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryRewardsPoolResponse();
        message.undistributedFunds = ((_a = object.undistributedFunds) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.treasuryFunds = ((_b = object.treasuryFunds) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a, _b;
        const message = createBaseQueryRewardsPoolResponse();
        message.undistributedFunds = ((_a = object.undistributed_funds) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        message.treasuryFunds = ((_b = object.treasury_funds) === null || _b === void 0 ? void 0 : _b.map(e => coin_1.Coin.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.undistributedFunds) {
            obj.undistributed_funds = message.undistributedFunds.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.undistributed_funds = [];
        }
        if (message.treasuryFunds) {
            obj.treasury_funds = message.treasuryFunds.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.treasury_funds = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryRewardsPoolResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryRewardsPoolResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryRewardsPoolResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryRewardsPoolResponse",
            value: exports.QueryRewardsPoolResponse.encode(message).finish()
        };
    }
};
function createBaseQueryEstimateTxFeesRequest() {
    return {
        gasLimit: BigInt(0),
        contractAddress: ""
    };
}
exports.QueryEstimateTxFeesRequest = {
    typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.gasLimit !== BigInt(0)) {
            writer.uint32(8).uint64(message.gasLimit);
        }
        if (message.contractAddress !== "") {
            writer.uint32(18).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateTxFeesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gasLimit = reader.uint64();
                    break;
                case 2:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasLimit: (0, helpers_1.isSet)(object.gasLimit) ? BigInt(object.gasLimit.toString()) : BigInt(0),
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.gasLimit !== undefined && (obj.gasLimit = (message.gasLimit || BigInt(0)).toString());
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryEstimateTxFeesRequest();
        message.gasLimit = object.gasLimit !== undefined && object.gasLimit !== null ? BigInt(object.gasLimit.toString()) : BigInt(0);
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryEstimateTxFeesRequest();
        if (object.gas_limit !== undefined && object.gas_limit !== null) {
            message.gasLimit = BigInt(object.gas_limit);
        }
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.gas_limit = message.gasLimit ? message.gasLimit.toString() : undefined;
        obj.contract_address = message.contractAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryEstimateTxFeesRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryEstimateTxFeesRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryEstimateTxFeesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesRequest",
            value: exports.QueryEstimateTxFeesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryEstimateTxFeesResponse() {
    return {
        gasUnitPrice: coin_1.DecCoin.fromPartial({}),
        estimatedFee: []
    };
}
exports.QueryEstimateTxFeesResponse = {
    typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.gasUnitPrice !== undefined) {
            coin_1.DecCoin.encode(message.gasUnitPrice, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.estimatedFee) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateTxFeesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gasUnitPrice = coin_1.DecCoin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.estimatedFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gasUnitPrice: (0, helpers_1.isSet)(object.gasUnitPrice) ? coin_1.DecCoin.fromJSON(object.gasUnitPrice) : undefined,
            estimatedFee: Array.isArray(object === null || object === void 0 ? void 0 : object.estimatedFee) ? object.estimatedFee.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.gasUnitPrice !== undefined && (obj.gasUnitPrice = message.gasUnitPrice ? coin_1.DecCoin.toJSON(message.gasUnitPrice) : undefined);
        if (message.estimatedFee) {
            obj.estimatedFee = message.estimatedFee.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.estimatedFee = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryEstimateTxFeesResponse();
        message.gasUnitPrice = object.gasUnitPrice !== undefined && object.gasUnitPrice !== null ? coin_1.DecCoin.fromPartial(object.gasUnitPrice) : undefined;
        message.estimatedFee = ((_a = object.estimatedFee) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseQueryEstimateTxFeesResponse();
        if (object.gas_unit_price !== undefined && object.gas_unit_price !== null) {
            message.gasUnitPrice = coin_1.DecCoin.fromAmino(object.gas_unit_price);
        }
        message.estimatedFee = ((_a = object.estimated_fee) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.gas_unit_price = message.gasUnitPrice ? coin_1.DecCoin.toAmino(message.gasUnitPrice) : undefined;
        if (message.estimatedFee) {
            obj.estimated_fee = message.estimatedFee.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.estimated_fee = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryEstimateTxFeesResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryEstimateTxFeesResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryEstimateTxFeesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryEstimateTxFeesResponse",
            value: exports.QueryEstimateTxFeesResponse.encode(message).finish()
        };
    }
};
function createBaseBlockTracking() {
    return {
        inflationRewards: rewards_1.BlockRewards.fromPartial({}),
        txRewards: []
    };
}
exports.BlockTracking = {
    typeUrl: "/archway.rewards.v1.BlockTracking",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.inflationRewards !== undefined) {
            rewards_1.BlockRewards.encode(message.inflationRewards, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.txRewards) {
            rewards_1.TxRewards.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockTracking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflationRewards = rewards_1.BlockRewards.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.txRewards.push(rewards_1.TxRewards.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            inflationRewards: (0, helpers_1.isSet)(object.inflationRewards) ? rewards_1.BlockRewards.fromJSON(object.inflationRewards) : undefined,
            txRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.txRewards) ? object.txRewards.map((e) => rewards_1.TxRewards.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.inflationRewards !== undefined && (obj.inflationRewards = message.inflationRewards ? rewards_1.BlockRewards.toJSON(message.inflationRewards) : undefined);
        if (message.txRewards) {
            obj.txRewards = message.txRewards.map(e => e ? rewards_1.TxRewards.toJSON(e) : undefined);
        }
        else {
            obj.txRewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBlockTracking();
        message.inflationRewards = object.inflationRewards !== undefined && object.inflationRewards !== null ? rewards_1.BlockRewards.fromPartial(object.inflationRewards) : undefined;
        message.txRewards = ((_a = object.txRewards) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.TxRewards.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseBlockTracking();
        if (object.inflation_rewards !== undefined && object.inflation_rewards !== null) {
            message.inflationRewards = rewards_1.BlockRewards.fromAmino(object.inflation_rewards);
        }
        message.txRewards = ((_a = object.tx_rewards) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.TxRewards.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.inflation_rewards = message.inflationRewards ? rewards_1.BlockRewards.toAmino(message.inflationRewards) : undefined;
        if (message.txRewards) {
            obj.tx_rewards = message.txRewards.map(e => e ? rewards_1.TxRewards.toAmino(e) : undefined);
        }
        else {
            obj.tx_rewards = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.BlockTracking.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.BlockTracking.decode(message.value);
    },
    toProto(message) {
        return exports.BlockTracking.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.BlockTracking",
            value: exports.BlockTracking.encode(message).finish()
        };
    }
};
function createBaseQueryRewardsRecordsRequest() {
    return {
        rewardsAddress: "",
        pagination: undefined
    };
}
exports.QueryRewardsRecordsRequest = {
    typeUrl: "/archway.rewards.v1.QueryRewardsRecordsRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.rewardsAddress !== "") {
            writer.uint32(10).string(message.rewardsAddress);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsRecordsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsAddress = reader.string();
                    break;
                case 2:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : "",
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryRewardsRecordsRequest();
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageRequest.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryRewardsRecordsRequest();
        if (object.rewards_address !== undefined && object.rewards_address !== null) {
            message.rewardsAddress = object.rewards_address;
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromAmino(object.pagination);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.rewards_address = message.rewardsAddress;
        obj.pagination = message.pagination ? pagination_1.PageRequest.toAmino(message.pagination) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryRewardsRecordsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryRewardsRecordsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryRewardsRecordsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryRewardsRecordsRequest",
            value: exports.QueryRewardsRecordsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryRewardsRecordsResponse() {
    return {
        records: [],
        pagination: undefined
    };
}
exports.QueryRewardsRecordsResponse = {
    typeUrl: "/archway.rewards.v1.QueryRewardsRecordsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.records) {
            rewards_1.RewardsRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRewardsRecordsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(rewards_1.RewardsRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            records: Array.isArray(object === null || object === void 0 ? void 0 : object.records) ? object.records.map((e) => rewards_1.RewardsRecord.fromJSON(e)) : [],
            pagination: (0, helpers_1.isSet)(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? rewards_1.RewardsRecord.toJSON(e) : undefined);
        }
        else {
            obj.records = [];
        }
        message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryRewardsRecordsResponse();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.RewardsRecord.fromPartial(e))) || [];
        message.pagination = object.pagination !== undefined && object.pagination !== null ? pagination_1.PageResponse.fromPartial(object.pagination) : undefined;
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseQueryRewardsRecordsResponse();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map(e => rewards_1.RewardsRecord.fromAmino(e))) || [];
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromAmino(object.pagination);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.records) {
            obj.records = message.records.map(e => e ? rewards_1.RewardsRecord.toAmino(e) : undefined);
        }
        else {
            obj.records = [];
        }
        obj.pagination = message.pagination ? pagination_1.PageResponse.toAmino(message.pagination) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryRewardsRecordsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryRewardsRecordsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryRewardsRecordsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryRewardsRecordsResponse",
            value: exports.QueryRewardsRecordsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryOutstandingRewardsRequest() {
    return {
        rewardsAddress: ""
    };
}
exports.QueryOutstandingRewardsRequest = {
    typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.rewardsAddress !== "") {
            writer.uint32(10).string(message.rewardsAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutstandingRewardsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOutstandingRewardsRequest();
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryOutstandingRewardsRequest();
        if (object.rewards_address !== undefined && object.rewards_address !== null) {
            message.rewardsAddress = object.rewards_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.rewards_address = message.rewardsAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryOutstandingRewardsRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryOutstandingRewardsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryOutstandingRewardsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsRequest",
            value: exports.QueryOutstandingRewardsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryOutstandingRewardsResponse() {
    return {
        totalRewards: [],
        recordsNum: BigInt(0)
    };
}
exports.QueryOutstandingRewardsResponse = {
    typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.totalRewards) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.recordsNum !== BigInt(0)) {
            writer.uint32(16).uint64(message.recordsNum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryOutstandingRewardsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.totalRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.recordsNum = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            totalRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.totalRewards) ? object.totalRewards.map((e) => coin_1.Coin.fromJSON(e)) : [],
            recordsNum: (0, helpers_1.isSet)(object.recordsNum) ? BigInt(object.recordsNum.toString()) : BigInt(0)
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.totalRewards) {
            obj.totalRewards = message.totalRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.totalRewards = [];
        }
        message.recordsNum !== undefined && (obj.recordsNum = (message.recordsNum || BigInt(0)).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryOutstandingRewardsResponse();
        message.totalRewards = ((_a = object.totalRewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        message.recordsNum = object.recordsNum !== undefined && object.recordsNum !== null ? BigInt(object.recordsNum.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseQueryOutstandingRewardsResponse();
        message.totalRewards = ((_a = object.total_rewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        if (object.records_num !== undefined && object.records_num !== null) {
            message.recordsNum = BigInt(object.records_num);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.totalRewards) {
            obj.total_rewards = message.totalRewards.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.total_rewards = [];
        }
        obj.records_num = message.recordsNum ? message.recordsNum.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryOutstandingRewardsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryOutstandingRewardsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryOutstandingRewardsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryOutstandingRewardsResponse",
            value: exports.QueryOutstandingRewardsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryFlatFeeRequest() {
    return {
        contractAddress: ""
    };
}
exports.QueryFlatFeeRequest = {
    typeUrl: "/archway.rewards.v1.QueryFlatFeeRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.contractAddress !== "") {
            writer.uint32(10).string(message.contractAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFlatFeeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : ""
        };
    },
    toJSON(message) {
        const obj = {};
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFlatFeeRequest();
        message.contractAddress = (_a = object.contractAddress) !== null && _a !== void 0 ? _a : "";
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryFlatFeeRequest();
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.contract_address = message.contractAddress;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryFlatFeeRequest.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryFlatFeeRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryFlatFeeRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryFlatFeeRequest",
            value: exports.QueryFlatFeeRequest.encode(message).finish()
        };
    }
};
function createBaseQueryFlatFeeResponse() {
    return {
        flatFeeAmount: coin_1.Coin.fromPartial({})
    };
}
exports.QueryFlatFeeResponse = {
    typeUrl: "/archway.rewards.v1.QueryFlatFeeResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.flatFeeAmount !== undefined) {
            coin_1.Coin.encode(message.flatFeeAmount, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFlatFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.flatFeeAmount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            flatFeeAmount: (0, helpers_1.isSet)(object.flatFeeAmount) ? coin_1.Coin.fromJSON(object.flatFeeAmount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.flatFeeAmount !== undefined && (obj.flatFeeAmount = message.flatFeeAmount ? coin_1.Coin.toJSON(message.flatFeeAmount) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryFlatFeeResponse();
        message.flatFeeAmount = object.flatFeeAmount !== undefined && object.flatFeeAmount !== null ? coin_1.Coin.fromPartial(object.flatFeeAmount) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseQueryFlatFeeResponse();
        if (object.flat_fee_amount !== undefined && object.flat_fee_amount !== null) {
            message.flatFeeAmount = coin_1.Coin.fromAmino(object.flat_fee_amount);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.flat_fee_amount = message.flatFeeAmount ? coin_1.Coin.toAmino(message.flatFeeAmount) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryFlatFeeResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.QueryFlatFeeResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryFlatFeeResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.QueryFlatFeeResponse",
            value: exports.QueryFlatFeeResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map