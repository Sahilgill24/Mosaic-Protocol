"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
const binary_1 = require("../../../binary");
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("./query");
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.params = this.params.bind(this);
        this.contractMetadata = this.contractMetadata.bind(this);
        this.blockRewardsTracking = this.blockRewardsTracking.bind(this);
        this.rewardsPool = this.rewardsPool.bind(this);
        this.estimateTxFees = this.estimateTxFees.bind(this);
        this.rewardsRecords = this.rewardsRecords.bind(this);
        this.outstandingRewards = this.outstandingRewards.bind(this);
        this.flatFee = this.flatFee.bind(this);
    }
    params(request = {}) {
        const data = query_1.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "Params", data);
        return promise.then(data => query_1.QueryParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
    contractMetadata(request) {
        const data = query_1.QueryContractMetadataRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "ContractMetadata", data);
        return promise.then(data => query_1.QueryContractMetadataResponse.decode(new binary_1.BinaryReader(data)));
    }
    blockRewardsTracking(request = {}) {
        const data = query_1.QueryBlockRewardsTrackingRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "BlockRewardsTracking", data);
        return promise.then(data => query_1.QueryBlockRewardsTrackingResponse.decode(new binary_1.BinaryReader(data)));
    }
    rewardsPool(request = {}) {
        const data = query_1.QueryRewardsPoolRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "RewardsPool", data);
        return promise.then(data => query_1.QueryRewardsPoolResponse.decode(new binary_1.BinaryReader(data)));
    }
    estimateTxFees(request) {
        const data = query_1.QueryEstimateTxFeesRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "EstimateTxFees", data);
        return promise.then(data => query_1.QueryEstimateTxFeesResponse.decode(new binary_1.BinaryReader(data)));
    }
    rewardsRecords(request) {
        const data = query_1.QueryRewardsRecordsRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "RewardsRecords", data);
        return promise.then(data => query_1.QueryRewardsRecordsResponse.decode(new binary_1.BinaryReader(data)));
    }
    outstandingRewards(request) {
        const data = query_1.QueryOutstandingRewardsRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "OutstandingRewards", data);
        return promise.then(data => query_1.QueryOutstandingRewardsResponse.decode(new binary_1.BinaryReader(data)));
    }
    flatFee(request) {
        const data = query_1.QueryFlatFeeRequest.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Query", "FlatFee", data);
        return promise.then(data => query_1.QueryFlatFeeResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
const createRpcQueryExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        params(request) {
            return queryService.params(request);
        },
        contractMetadata(request) {
            return queryService.contractMetadata(request);
        },
        blockRewardsTracking(request) {
            return queryService.blockRewardsTracking(request);
        },
        rewardsPool(request) {
            return queryService.rewardsPool(request);
        },
        estimateTxFees(request) {
            return queryService.estimateTxFees(request);
        },
        rewardsRecords(request) {
            return queryService.rewardsRecords(request);
        },
        outstandingRewards(request) {
            return queryService.outstandingRewards(request);
        },
        flatFee(request) {
            return queryService.flatFee(request);
        }
    };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
//# sourceMappingURL=query.rpc.Query.js.map