"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = void 0;
const binary_1 = require("../../../binary");
const tx_1 = require("./tx");
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.setContractMetadata = this.setContractMetadata.bind(this);
        this.withdrawRewards = this.withdrawRewards.bind(this);
        this.setFlatFee = this.setFlatFee.bind(this);
        this.updateParams = this.updateParams.bind(this);
    }
    setContractMetadata(request) {
        const data = tx_1.MsgSetContractMetadata.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Msg", "SetContractMetadata", data);
        return promise.then(data => tx_1.MsgSetContractMetadataResponse.decode(new binary_1.BinaryReader(data)));
    }
    withdrawRewards(request) {
        const data = tx_1.MsgWithdrawRewards.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Msg", "WithdrawRewards", data);
        return promise.then(data => tx_1.MsgWithdrawRewardsResponse.decode(new binary_1.BinaryReader(data)));
    }
    setFlatFee(request) {
        const data = tx_1.MsgSetFlatFee.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Msg", "SetFlatFee", data);
        return promise.then(data => tx_1.MsgSetFlatFeeResponse.decode(new binary_1.BinaryReader(data)));
    }
    updateParams(request) {
        const data = tx_1.MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request("archway.rewards.v1.Msg", "UpdateParams", data);
        return promise.then(data => tx_1.MsgUpdateParamsResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
//# sourceMappingURL=tx.rpc.msg.js.map