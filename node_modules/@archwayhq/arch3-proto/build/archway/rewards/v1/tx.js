"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateParamsResponse = exports.MsgUpdateParams = exports.MsgSetFlatFeeResponse = exports.MsgSetFlatFee = exports.MsgWithdrawRewardsResponse = exports.MsgWithdrawRewards_RecordIDs = exports.MsgWithdrawRewards_RecordsLimit = exports.MsgWithdrawRewards = exports.MsgSetContractMetadataResponse = exports.MsgSetContractMetadata = void 0;
/* eslint-disable */
const rewards_1 = require("./rewards");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
const helpers_1 = require("../../../helpers");
function createBaseMsgSetContractMetadata() {
    return {
        senderAddress: "",
        metadata: rewards_1.ContractMetadata.fromPartial({})
    };
}
exports.MsgSetContractMetadata = {
    typeUrl: "/archway.rewards.v1.MsgSetContractMetadata",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.metadata !== undefined) {
            rewards_1.ContractMetadata.encode(message.metadata, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetContractMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.senderAddress = reader.string();
                    break;
                case 2:
                    message.metadata = rewards_1.ContractMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: (0, helpers_1.isSet)(object.senderAddress) ? String(object.senderAddress) : "",
            metadata: (0, helpers_1.isSet)(object.metadata) ? rewards_1.ContractMetadata.fromJSON(object.metadata) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.senderAddress !== undefined && (obj.senderAddress = message.senderAddress);
        message.metadata !== undefined && (obj.metadata = message.metadata ? rewards_1.ContractMetadata.toJSON(message.metadata) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgSetContractMetadata();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.metadata = object.metadata !== undefined && object.metadata !== null ? rewards_1.ContractMetadata.fromPartial(object.metadata) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgSetContractMetadata();
        if (object.sender_address !== undefined && object.sender_address !== null) {
            message.senderAddress = object.sender_address;
        }
        if (object.metadata !== undefined && object.metadata !== null) {
            message.metadata = rewards_1.ContractMetadata.fromAmino(object.metadata);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sender_address = message.senderAddress;
        obj.metadata = message.metadata ? rewards_1.ContractMetadata.toAmino(message.metadata) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetContractMetadata.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSetContractMetadata.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetContractMetadata.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgSetContractMetadata",
            value: exports.MsgSetContractMetadata.encode(message).finish()
        };
    }
};
function createBaseMsgSetContractMetadataResponse() {
    return {};
}
exports.MsgSetContractMetadataResponse = {
    typeUrl: "/archway.rewards.v1.MsgSetContractMetadataResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetContractMetadataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSetContractMetadataResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgSetContractMetadataResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetContractMetadataResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSetContractMetadataResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetContractMetadataResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgSetContractMetadataResponse",
            value: exports.MsgSetContractMetadataResponse.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawRewards() {
    return {
        rewardsAddress: "",
        recordsLimit: undefined,
        recordIds: undefined
    };
}
exports.MsgWithdrawRewards = {
    typeUrl: "/archway.rewards.v1.MsgWithdrawRewards",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.rewardsAddress !== "") {
            writer.uint32(10).string(message.rewardsAddress);
        }
        if (message.recordsLimit !== undefined) {
            exports.MsgWithdrawRewards_RecordsLimit.encode(message.recordsLimit, writer.uint32(18).fork()).ldelim();
        }
        if (message.recordIds !== undefined) {
            exports.MsgWithdrawRewards_RecordIDs.encode(message.recordIds, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawRewards();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsAddress = reader.string();
                    break;
                case 2:
                    message.recordsLimit = exports.MsgWithdrawRewards_RecordsLimit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recordIds = exports.MsgWithdrawRewards_RecordIDs.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rewardsAddress: (0, helpers_1.isSet)(object.rewardsAddress) ? String(object.rewardsAddress) : "",
            recordsLimit: (0, helpers_1.isSet)(object.recordsLimit) ? exports.MsgWithdrawRewards_RecordsLimit.fromJSON(object.recordsLimit) : undefined,
            recordIds: (0, helpers_1.isSet)(object.recordIds) ? exports.MsgWithdrawRewards_RecordIDs.fromJSON(object.recordIds) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.rewardsAddress !== undefined && (obj.rewardsAddress = message.rewardsAddress);
        message.recordsLimit !== undefined && (obj.recordsLimit = message.recordsLimit ? exports.MsgWithdrawRewards_RecordsLimit.toJSON(message.recordsLimit) : undefined);
        message.recordIds !== undefined && (obj.recordIds = message.recordIds ? exports.MsgWithdrawRewards_RecordIDs.toJSON(message.recordIds) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgWithdrawRewards();
        message.rewardsAddress = (_a = object.rewardsAddress) !== null && _a !== void 0 ? _a : "";
        message.recordsLimit = object.recordsLimit !== undefined && object.recordsLimit !== null ? exports.MsgWithdrawRewards_RecordsLimit.fromPartial(object.recordsLimit) : undefined;
        message.recordIds = object.recordIds !== undefined && object.recordIds !== null ? exports.MsgWithdrawRewards_RecordIDs.fromPartial(object.recordIds) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgWithdrawRewards();
        if (object.rewards_address !== undefined && object.rewards_address !== null) {
            message.rewardsAddress = object.rewards_address;
        }
        if (object.records_limit !== undefined && object.records_limit !== null) {
            message.recordsLimit = exports.MsgWithdrawRewards_RecordsLimit.fromAmino(object.records_limit);
        }
        if (object.record_ids !== undefined && object.record_ids !== null) {
            message.recordIds = exports.MsgWithdrawRewards_RecordIDs.fromAmino(object.record_ids);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.rewards_address = message.rewardsAddress;
        obj.records_limit = message.recordsLimit ? exports.MsgWithdrawRewards_RecordsLimit.toAmino(message.recordsLimit) : undefined;
        obj.record_ids = message.recordIds ? exports.MsgWithdrawRewards_RecordIDs.toAmino(message.recordIds) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawRewards.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawRewards.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawRewards.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgWithdrawRewards",
            value: exports.MsgWithdrawRewards.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawRewards_RecordsLimit() {
    return {
        limit: BigInt(0)
    };
}
exports.MsgWithdrawRewards_RecordsLimit = {
    typeUrl: "/archway.rewards.v1.RecordsLimit",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.limit !== BigInt(0)) {
            writer.uint32(8).uint64(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawRewards_RecordsLimit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.limit = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            limit: (0, helpers_1.isSet)(object.limit) ? BigInt(object.limit.toString()) : BigInt(0)
        };
    },
    toJSON(message) {
        const obj = {};
        message.limit !== undefined && (obj.limit = (message.limit || BigInt(0)).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseMsgWithdrawRewards_RecordsLimit();
        message.limit = object.limit !== undefined && object.limit !== null ? BigInt(object.limit.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgWithdrawRewards_RecordsLimit();
        if (object.limit !== undefined && object.limit !== null) {
            message.limit = BigInt(object.limit);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.limit = message.limit ? message.limit.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawRewards_RecordsLimit.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawRewards_RecordsLimit.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawRewards_RecordsLimit.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.RecordsLimit",
            value: exports.MsgWithdrawRewards_RecordsLimit.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawRewards_RecordIDs() {
    return {
        ids: []
    };
}
exports.MsgWithdrawRewards_RecordIDs = {
    typeUrl: "/archway.rewards.v1.RecordIDs",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawRewards_RecordIDs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.uint64());
                        }
                    }
                    else {
                        message.ids.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            ids: Array.isArray(object === null || object === void 0 ? void 0 : object.ids) ? object.ids.map((e) => BigInt(e.toString())) : []
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ids) {
            obj.ids = message.ids.map(e => (e || BigInt(0)).toString());
        }
        else {
            obj.ids = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgWithdrawRewards_RecordIDs();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map(e => BigInt(e.toString()))) || [];
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseMsgWithdrawRewards_RecordIDs();
        message.ids = ((_a = object.ids) === null || _a === void 0 ? void 0 : _a.map(e => BigInt(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        if (message.ids) {
            obj.ids = message.ids.map(e => e.toString());
        }
        else {
            obj.ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawRewards_RecordIDs.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawRewards_RecordIDs.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawRewards_RecordIDs.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.RecordIDs",
            value: exports.MsgWithdrawRewards_RecordIDs.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawRewardsResponse() {
    return {
        recordsNum: BigInt(0),
        totalRewards: []
    };
}
exports.MsgWithdrawRewardsResponse = {
    typeUrl: "/archway.rewards.v1.MsgWithdrawRewardsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.recordsNum !== BigInt(0)) {
            writer.uint32(8).uint64(message.recordsNum);
        }
        for (const v of message.totalRewards) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawRewardsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordsNum = reader.uint64();
                    break;
                case 2:
                    message.totalRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordsNum: (0, helpers_1.isSet)(object.recordsNum) ? BigInt(object.recordsNum.toString()) : BigInt(0),
            totalRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.totalRewards) ? object.totalRewards.map((e) => coin_1.Coin.fromJSON(e)) : []
        };
    },
    toJSON(message) {
        const obj = {};
        message.recordsNum !== undefined && (obj.recordsNum = (message.recordsNum || BigInt(0)).toString());
        if (message.totalRewards) {
            obj.totalRewards = message.totalRewards.map(e => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.totalRewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgWithdrawRewardsResponse();
        message.recordsNum = object.recordsNum !== undefined && object.recordsNum !== null ? BigInt(object.recordsNum.toString()) : BigInt(0);
        message.totalRewards = ((_a = object.totalRewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
    fromAmino(object) {
        var _a;
        const message = createBaseMsgWithdrawRewardsResponse();
        if (object.records_num !== undefined && object.records_num !== null) {
            message.recordsNum = BigInt(object.records_num);
        }
        message.totalRewards = ((_a = object.total_rewards) === null || _a === void 0 ? void 0 : _a.map(e => coin_1.Coin.fromAmino(e))) || [];
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.records_num = message.recordsNum ? message.recordsNum.toString() : undefined;
        if (message.totalRewards) {
            obj.total_rewards = message.totalRewards.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.total_rewards = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawRewardsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawRewardsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawRewardsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgWithdrawRewardsResponse",
            value: exports.MsgWithdrawRewardsResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetFlatFee() {
    return {
        senderAddress: "",
        contractAddress: "",
        flatFeeAmount: coin_1.Coin.fromPartial({})
    };
}
exports.MsgSetFlatFee = {
    typeUrl: "/archway.rewards.v1.MsgSetFlatFee",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.contractAddress !== "") {
            writer.uint32(18).string(message.contractAddress);
        }
        if (message.flatFeeAmount !== undefined) {
            coin_1.Coin.encode(message.flatFeeAmount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetFlatFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.senderAddress = reader.string();
                    break;
                case 2:
                    message.contractAddress = reader.string();
                    break;
                case 3:
                    message.flatFeeAmount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: (0, helpers_1.isSet)(object.senderAddress) ? String(object.senderAddress) : "",
            contractAddress: (0, helpers_1.isSet)(object.contractAddress) ? String(object.contractAddress) : "",
            flatFeeAmount: (0, helpers_1.isSet)(object.flatFeeAmount) ? coin_1.Coin.fromJSON(object.flatFeeAmount) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.senderAddress !== undefined && (obj.senderAddress = message.senderAddress);
        message.contractAddress !== undefined && (obj.contractAddress = message.contractAddress);
        message.flatFeeAmount !== undefined && (obj.flatFeeAmount = message.flatFeeAmount ? coin_1.Coin.toJSON(message.flatFeeAmount) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgSetFlatFee();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.contractAddress = (_b = object.contractAddress) !== null && _b !== void 0 ? _b : "";
        message.flatFeeAmount = object.flatFeeAmount !== undefined && object.flatFeeAmount !== null ? coin_1.Coin.fromPartial(object.flatFeeAmount) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgSetFlatFee();
        if (object.sender_address !== undefined && object.sender_address !== null) {
            message.senderAddress = object.sender_address;
        }
        if (object.contract_address !== undefined && object.contract_address !== null) {
            message.contractAddress = object.contract_address;
        }
        if (object.flat_fee_amount !== undefined && object.flat_fee_amount !== null) {
            message.flatFeeAmount = coin_1.Coin.fromAmino(object.flat_fee_amount);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.sender_address = message.senderAddress;
        obj.contract_address = message.contractAddress;
        obj.flat_fee_amount = message.flatFeeAmount ? coin_1.Coin.toAmino(message.flatFeeAmount) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetFlatFee.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSetFlatFee.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetFlatFee.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgSetFlatFee",
            value: exports.MsgSetFlatFee.encode(message).finish()
        };
    }
};
function createBaseMsgSetFlatFeeResponse() {
    return {};
}
exports.MsgSetFlatFeeResponse = {
    typeUrl: "/archway.rewards.v1.MsgSetFlatFeeResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetFlatFeeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgSetFlatFeeResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgSetFlatFeeResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSetFlatFeeResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgSetFlatFeeResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSetFlatFeeResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgSetFlatFeeResponse",
            value: exports.MsgSetFlatFeeResponse.encode(message).finish()
        };
    }
};
function createBaseMsgUpdateParams() {
    return {
        authority: "",
        params: rewards_1.Params.fromPartial({})
    };
}
exports.MsgUpdateParams = {
    typeUrl: "/archway.rewards.v1.MsgUpdateParams",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            rewards_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.authority = reader.string();
                    break;
                case 2:
                    message.params = rewards_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: (0, helpers_1.isSet)(object.authority) ? String(object.authority) : "",
            params: (0, helpers_1.isSet)(object.params) ? rewards_1.Params.fromJSON(object.params) : undefined
        };
    },
    toJSON(message) {
        const obj = {};
        message.authority !== undefined && (obj.authority = message.authority);
        message.params !== undefined && (obj.params = message.params ? rewards_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params = object.params !== undefined && object.params !== null ? rewards_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        const message = createBaseMsgUpdateParams();
        if (object.authority !== undefined && object.authority !== null) {
            message.authority = object.authority;
        }
        if (object.params !== undefined && object.params !== null) {
            message.params = rewards_1.Params.fromAmino(object.params);
        }
        return message;
    },
    toAmino(message) {
        const obj = {};
        obj.authority = message.authority;
        obj.params = message.params ? rewards_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUpdateParams.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgUpdateParams.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUpdateParams.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgUpdateParams",
            value: exports.MsgUpdateParams.encode(message).finish()
        };
    }
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
exports.MsgUpdateParamsResponse = {
    typeUrl: "/archway.rewards.v1.MsgUpdateParamsResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    fromAmino(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUpdateParamsResponse.fromAmino(object.value);
    },
    fromProtoMsg(message) {
        return exports.MsgUpdateParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUpdateParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/archway.rewards.v1.MsgUpdateParamsResponse",
            value: exports.MsgUpdateParamsResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map