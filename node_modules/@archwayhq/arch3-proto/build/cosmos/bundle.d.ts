import * as _9 from "./base/query/v1beta1/pagination";
import * as _10 from "./base/v1beta1/coin";
export declare namespace cosmos {
    namespace base {
        namespace query {
            const v1beta1: {
                PageRequest: {
                    typeUrl: string;
                    encode(message: _9.PageRequest, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _9.PageRequest;
                    fromJSON(object: any): _9.PageRequest;
                    toJSON(message: _9.PageRequest): unknown;
                    fromPartial(object: Partial<_9.PageRequest>): _9.PageRequest;
                    fromAmino(object: _9.PageRequestAmino): _9.PageRequest;
                    toAmino(message: _9.PageRequest): _9.PageRequestAmino;
                    fromAminoMsg(object: _9.PageRequestAminoMsg): _9.PageRequest;
                    toAminoMsg(message: _9.PageRequest): _9.PageRequestAminoMsg;
                    fromProtoMsg(message: _9.PageRequestProtoMsg): _9.PageRequest;
                    toProto(message: _9.PageRequest): Uint8Array;
                    toProtoMsg(message: _9.PageRequest): _9.PageRequestProtoMsg;
                };
                PageResponse: {
                    typeUrl: string;
                    encode(message: _9.PageResponse, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                    decode(input: Uint8Array | import("..").BinaryReader, length?: number): _9.PageResponse;
                    fromJSON(object: any): _9.PageResponse;
                    toJSON(message: _9.PageResponse): unknown;
                    fromPartial(object: Partial<_9.PageResponse>): _9.PageResponse;
                    fromAmino(object: _9.PageResponseAmino): _9.PageResponse;
                    toAmino(message: _9.PageResponse): _9.PageResponseAmino;
                    fromAminoMsg(object: _9.PageResponseAminoMsg): _9.PageResponse;
                    toAminoMsg(message: _9.PageResponse): _9.PageResponseAminoMsg;
                    fromProtoMsg(message: _9.PageResponseProtoMsg): _9.PageResponse;
                    toProto(message: _9.PageResponse): Uint8Array;
                    toProtoMsg(message: _9.PageResponse): _9.PageResponseProtoMsg;
                };
            };
        }
        const v1beta1: {
            Coin: {
                typeUrl: string;
                encode(message: _10.Coin, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _10.Coin;
                fromJSON(object: any): _10.Coin;
                toJSON(message: _10.Coin): unknown;
                fromPartial(object: Partial<_10.Coin>): _10.Coin;
                fromAmino(object: _10.CoinAmino): _10.Coin;
                toAmino(message: _10.Coin): _10.CoinAmino;
                fromAminoMsg(object: _10.CoinAminoMsg): _10.Coin;
                toAminoMsg(message: _10.Coin): _10.CoinAminoMsg;
                fromProtoMsg(message: _10.CoinProtoMsg): _10.Coin;
                toProto(message: _10.Coin): Uint8Array;
                toProtoMsg(message: _10.Coin): _10.CoinProtoMsg;
            };
            DecCoin: {
                typeUrl: string;
                encode(message: _10.DecCoin, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _10.DecCoin;
                fromJSON(object: any): _10.DecCoin;
                toJSON(message: _10.DecCoin): unknown;
                fromPartial(object: Partial<_10.DecCoin>): _10.DecCoin;
                fromAmino(object: _10.DecCoinAmino): _10.DecCoin;
                toAmino(message: _10.DecCoin): _10.DecCoinAmino;
                fromAminoMsg(object: _10.DecCoinAminoMsg): _10.DecCoin;
                toAminoMsg(message: _10.DecCoin): _10.DecCoinAminoMsg;
                fromProtoMsg(message: _10.DecCoinProtoMsg): _10.DecCoin;
                toProto(message: _10.DecCoin): Uint8Array;
                toProtoMsg(message: _10.DecCoin): _10.DecCoinProtoMsg;
            };
            IntProto: {
                typeUrl: string;
                encode(message: _10.IntProto, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _10.IntProto;
                fromJSON(object: any): _10.IntProto;
                toJSON(message: _10.IntProto): unknown;
                fromPartial(object: Partial<_10.IntProto>): _10.IntProto;
                fromAmino(object: _10.IntProtoAmino): _10.IntProto;
                toAmino(message: _10.IntProto): _10.IntProtoAmino;
                fromAminoMsg(object: _10.IntProtoAminoMsg): _10.IntProto;
                toAminoMsg(message: _10.IntProto): _10.IntProtoAminoMsg;
                fromProtoMsg(message: _10.IntProtoProtoMsg): _10.IntProto;
                toProto(message: _10.IntProto): Uint8Array;
                toProtoMsg(message: _10.IntProto): _10.IntProtoProtoMsg;
            };
            DecProto: {
                typeUrl: string;
                encode(message: _10.DecProto, writer?: import("..").BinaryWriter): import("..").BinaryWriter;
                decode(input: Uint8Array | import("..").BinaryReader, length?: number): _10.DecProto;
                fromJSON(object: any): _10.DecProto;
                toJSON(message: _10.DecProto): unknown;
                fromPartial(object: Partial<_10.DecProto>): _10.DecProto;
                fromAmino(object: _10.DecProtoAmino): _10.DecProto;
                toAmino(message: _10.DecProto): _10.DecProtoAmino;
                fromAminoMsg(object: _10.DecProtoAminoMsg): _10.DecProto;
                toAminoMsg(message: _10.DecProto): _10.DecProtoAminoMsg;
                fromProtoMsg(message: _10.DecProtoProtoMsg): _10.DecProto;
                toProto(message: _10.DecProto): Uint8Array;
                toProtoMsg(message: _10.DecProto): _10.DecProtoProtoMsg;
            };
        };
    }
    namespace msg {
        const v1: {};
    }
}
